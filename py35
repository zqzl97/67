# -*- coding:utf-8 -*-
class Solution:
    def __init__(self):
        self.sum = 0.0
    def InversePairs(self, data):
        self.sum = 0.0
        l = 0
        r = len(data) - 1
        self.divide(l, r, data)
        return int(self.sum % 1000000007)
    def divide(self, l, r, data):
        if l != r:
            mid = int((l + r) / 2)
            self.divide(l, mid, data)
            self.divide(mid+1, r, data)
            self.merge(l, r, mid, data)
    def merge(self, l, r, mid, data):
        i = l
        j = mid + 1
        temp = []
        index = 0
        while i <= mid and j <= r:
            if data[i] > data[j]:
                temp.append(data[j])
                j += 1
                self.sum += mid - i + 1
            else:
                temp.append(data[i])
                i += 1
            index += 1
        while i <= mid:
            temp.append(data[i])
            index += 1
            i += 1
        while j <= r:
            temp.append(data[j])
            index += 1
            j += 1
        index = 0
        for k in range(l, r + 1):
            data[k] = temp[index]
            index += 1
